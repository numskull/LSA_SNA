u %*% (s %*% s) %*% t(u)
u %*% s %*% s %*% t(u)
u %*% s
cosine = function(x,y) {
top = x %*% y
bottom = sqrt(x%*%x) %*% sqrt(y%*%y)
return (top / bottom)
}
cosine(mat[1,], mat[2,])
cosine(mat[1,], mat[3,])
us = u%*%s
us
cosine(us[1,], us[2,])
cosine(mat[,1], mat[,2])
vs = v %*% s
vs
cosine(vs[1,], vs[2,])
sqrt(s)
s
x = u[1,] %*% sqrt(s)
x
y = v[1,] %*% sqrt(s)
y
cosine(x,y)
y = v[,1] %*% sqrt(s)
y
cosine(x,y)
y = t(v)[,1] %*% sqrt(s)
cosine(x,y)
y
top = u[1,] %*% s %*% t(v[1,])
top = u[1,] %*% s %*% t(v[,1])
top = u[1,] %*% s %*% t(v)[,1]
top
vec3 = c(2,3,2,1,0,1,1,2,2,3,1,2)
vec - vec3
vec3 - vec
pow()
(vec3-vec)^2
sum((vec3-vec)^2)
sqrt(sum((vec3-vec)^2))
euclid(mat[1,],mat[3,])
euclid = function(x,y) {
return(sqrt(sum((y-x)^2)))
}
euclid(mat[1,],mat[3,])
cosine(mat[1,], mat[3,])
setwd("~/Dropbox/Grad School/896")
df = read.csv("shakespeare.csv")
View(df)
df$thou
class(df)
df$X
df.rows()
df.names()
df.names
df.name
df = read.csv("shakespeare.csv", row.names=1)
df#thou
df$thou
df$X1H4
View(df)
df['thou']
df['thou',]
class9df['king',]
class(df['king',])
cosine(df['king',], df['battle',])
df['king',] * df['battle',]
df['king',] %*% df['battle',]
as.matrix(df['king',]) %*% as.matrix(df['battle',])
as.matrix(df['battle'])
as.matrix(df['battle',])
as.matrix(df['king',])
as.matrix(df['king',]) %*% as.matrix(df['battle',])
df2 = as.matrix[df]
df2 = as.matrix(df)
View(df2)
df2['battle',]
df2['battle',] %*% df2['king',]
euclid(df['battle',], df['king',])
df.rows
df.rows()
length(df[1,])
length(df[,1])
length(df[0,])
sum(df[0,])
sum(df[1,])
sum(df[,1])
ppmi = function(df) {
newDf = df.copy()
rows = rowSums(df)
cols = colSums(df)
bottom = rows+cols
for(i in 1:length(df[1,])){
sumR = sum(df[i,])
for(j in 1:length(df[,1])){
colSum = sum(df[,j])
pij = (df[i,j] / bottom)
pi = sumR / bottom
pj = colSum / bottom
pmi = log(pij/(pi * pj))
if pmi < 0{
pmi = 0
}
newDf[i,j] = pmi
}
}
return newDf
}
ppmi = function(df) {
newDf = df.copy()
rows = rowSums(df)
cols = colSums(df)
bottom = rows+cols
for(i in 1:length(df[1,])){
sumR = sum(df[i,])
for(j in 1:length(df[,1])){
colSum = sum(df[,j])
pij = (df[i,j] / bottom)
pi = sumR / bottom
pj = colSum / bottom
pmi = log(pij/(pi * pj))
if (pmi < 0){
pmi = 0
}
newDf[i,j] = pmi
}
}
return newDf
}
ppmi = function(df) {
newDf = df.copy()
rows = rowSums(df)
cols = colSums(df)
bottom = rows+cols
for(i in 1:length(df[1,])){
sumR = sum(df[i,])
for(j in 1:length(df[,1])){
colSum = sum(df[,j])
pij = (df[i,j] / bottom)
pi = sumR / bottom
pj = colSum / bottom
pmi = log(pij/(pi * pj))
if (pmi < 0){
pmi = 0
}
newDf[i,j] = pmi
}
}
return(newDf)
}
df3 = ppmi(df)
df3 = df
df3[1,2]
df3[1,2] = 1
df[1,2]
df3[1,2]
ppmi = function(df) {
newDf = df
rows = rowSums(df)
cols = colSums(df)
bottom = rows+cols
for(i in 1:length(df[1,])){
sumR = sum(df[i,])
for(j in 1:length(df[,1])){
colSum = sum(df[,j])
pij = (df[i,j] / bottom)
pi = sumR / bottom
pj = colSum / bottom
pmi = log(pij/(pi * pj))
if (pmi < 0){
pmi = 0
}
newDf[i,j] = pmi
}
}
return(newDf)
}
df3 = ppmi(df)
df[,1]
ppmi = function(df) {
newDf = df
rows = rowSums(df)
cols = colSums(df)
bottom = rows+cols
for(i in 1:length(df[,1])){
sumR = sum(df[i,])
for(j in 1:length(df[1,])){
colSum = sum(df[,j])
pij = (df[i,j] / bottom)
pi = sumR / bottom
pj = colSum / bottom
pmi = log(pij/(pi * pj))
if (pmi < 0){
pmi = 0
}
newDf[i,j] = pmi
}
}
return(newDf)
}
df3 = ppmi(df)
ppmi = function(df) {
newDf = df
rows = rowSums(df)
cols = colSums(df)
bottom = rows+cols
for(i in 1:length(df[,1])){
sumR = sum(df[i,])
for(j in 1:length(df[1,])){
colSum = sum(df[,j])
pij = (df[i,j] / bottom)
pi = sumR / bottom
pj = colSum / bottom
pmi = log(pij/(pi * pj))
break()
if (pmi < 0){
pmi = 0
}
newDf[i,j] = pmi
}
}
return(newDf)
}
ppmi = function(df) {
newDf = df
rows = rowSums(df)
cols = colSums(df)
bottom = rows+cols
for(i in 1:length(df[,1])){
sumR = sum(df[i,])
for(j in 1:length(df[1,])){
colSum = sum(df[,j])
pij = (df[i,j] / bottom)
pi = sumR / bottom
pj = colSum / bottom
pmi = log(pij/(pi * pj))
break()
if (pmi < 0){
pmi = 0
}
newDf[i,j] = pmi
}
}
return(newDf)
}
df3 = ppmi(df)
delete(df3)
remove(df3)
df3 = ppmi(df)
ppmi = function(df) {
newDf = df
rows = rowSums(df)
cols = colSums(df)
break()
bottom = rows+cols
for(i in 1:length(df[,1])){
sumR = sum(df[i,])
for(j in 1:length(df[1,])){
colSum = sum(df[,j])
pij = (df[i,j] / bottom)
pi = sumR / bottom
pj = colSum / bottom
pmi = log(pij/(pi * pj))
break()
if (pmi < 0){
pmi = 0
}
newDf[i,j] = pmi
}
}
return(newDf)
}
df3 = ppmi(df)
ppmi = function(df) {
newDf = df
rows = rowSums(df)
cols = colSums(df)
browser()
bottom = rows+cols
for(i in 1:length(df[,1])){
sumR = sum(df[i,])
for(j in 1:length(df[1,])){
colSum = sum(df[,j])
pij = (df[i,j] / bottom)
pi = sumR / bottom
pj = colSum / bottom
pmi = log(pij/(pi * pj))
browser()
if (pmi < 0){
pmi = 0
}
newDf[i,j] = pmi
}
}
return(newDf)
}
df3 = ppmi(df)
cols
rows
rows[1:10]
sum(rows)
cols = sum(colSums(df))
ppmi = function(df) {
newDf = df
rows = sum(rowSums(df))
cols = sum(colSums(df))
browser()
bottom = rows+cols
for(i in 1:length(df[,1])){
sumR = sum(df[i,])
for(j in 1:length(df[1,])){
colSum = sum(df[,j])
pij = (df[i,j] / bottom)
pi = sumR / bottom
pj = colSum / bottom
pmi = log(pij/(pi * pj))
browser()
if (pmi < 0){
pmi = 0
}
newDf[i,j] = pmi
}
}
return(newDf)
}
df3 = ppmi(df)
cols
rows
pij
pi
pj
pmi
ppmi = function(df) {
newDf = df
rows = sum(rowSums(df))
cols = sum(colSums(df))
browser()
bottom = rows+cols
for(i in 1:length(df[,1])){
sumR = sum(df[i,])
for(j in 1:length(df[1,])){
colSum = sum(df[,j])
pij = (df[i,j] / bottom)
pi = sumR / bottom
pj = colSum / bottom
pmi = log(pij/(pi * pj))
#browser()
if (pmi < 0){
pmi = 0
}
newDf[i,j] = pmi
}
}
return(newDf)
}
df3 = ppmi(df)
View(df3)
which(df3[1,] > 0)
which(df3[3,] > 0)
length(which(df3[3,] > 0))
tfidf = function(df){
newDF = df
for(i in 1:length(df[,1])){
numDocs = length(which(df[i,] > 0)) #number of documents the word is present in.
idf = log(length(df[,1]) / numDocs)
for(j in 1:length(df[1,])){
tf = df[i,j]
tfidf = tf * idf
newDf[i,j] = tfidf
}
}
}
df4 = tfidf(df)
tfidf = function(df){
newDf = df
for(i in 1:length(df[,1])){
numDocs = length(which(df[i,] > 0)) #number of documents the word is present in.
idf = log(length(df[,1]) / numDocs)
for(j in 1:length(df[1,])){
tf = df[i,j]
tfidf = tf * idf
newDf[i,j] = tfidf
}
}
return(newDf)
}
df4 = tfidf(df)
View(df4)
View(df4)
log(42/42)
tfidf = function(df){
newDf = df
for(i in 1:length(df[,1])){
numDocs = length(which(df[i,] > 0)) #number of documents the word is present in.
idf = log(length(df[,1]) / numDocs)
browser()
for(j in 1:length(df[1,])){
tf = df[i,j]
tfidf = tf * idf
newDf[i,j] = tfidf
}
}
return(newDf)
}
View(df4)
df4 = tfidf(df)
numDocs
length(which(df[,i]))
length(which(df[,i] > 0))
length(which(df[,i]) > 0)
length(which(df[i,]) > 0)
length(which(df[i,] > 0))
idf
length(df[,1])
tfidf = function(df){
newDf = df
for(i in 1:length(df[,1])){
numDocs = length(which(df[i,] > 0)) #number of documents the word is present in.
idf = log(length(df[1,]) / numDocs)
browser()
for(j in 1:length(df[1,])){
tf = df[i,j]
tfidf = tf * idf
newDf[i,j] = tfidf
}
}
return(newDf)
}
tfidf = function(df){
newDf = df
for(i in 1:length(df[,1])){
numDocs = length(which(df[i,] > 0)) #number of documents the word is present in.
idf = log(length(df[1,]) / numDocs)
#browser()
for(j in 1:length(df[1,])){
tf = df[i,j]
tfidf = tf * idf
newDf[i,j] = tfidf
}
}
return(newDf)
}
df4 = tfidf(df)
View(df4)
df4['love']
df4['love',]
df3['love',]
df[1,] - df[2,]
df[,1] - df[1,]
(df[,1] - df[1,])^2
sqrt((df[,1] - df[1,])^2)
termVec = df['love']
View(df)
termVec = df['love',]
df[1,2] - termVEc[2]
df[1,2] - termVec[2]
names(df[1,])
row.names(df[1,])
names(termVec)
row.names(termVec)
euclidSim = function(df, term) {
termVec = df[term]
distances = c()
for(i in 1:length(df[,1])) {
dist = 0
for(j in 1:length(df[1,])) {
if(df[i,] != termVec) {
dist = dist + (df[i,j]-termVec[j])^2
}
}
distances[i,] = dist
names(distances[i,]) = row.names(df[i,])
}
return(distances)
}
euclidSim(df, 'love')
uclidSim = function(df, term) {
termVec = df[term,]
distances = c()
for(i in 1:length(df[,1])) {
dist = 0
for(j in 1:length(df[1,])) {
if(df[i,] != termVec) {
dist = dist + (df[i,j]-termVec[j])^2
}
}
distances[i,] = dist
names(distances[i,]) = row.names(df[i,])
}
return(distances)
}
euclidSim(df, 'love')
euclidSim = function(df, term) {
termVec = df[term,]
distances = c()
for(i in 1:length(df[,1])) {
dist = 0
for(j in 1:length(df[1,])) {
if(df[i,] != termVec) {
dist = dist + (df[i,j]-termVec[j])^2
}
}
distances[i,] = dist
names(distances[i,]) = row.names(df[i,])
}
return(distances)
}
euclidSim(df, 'love')
warnins()
warnings()
save.image("~/Dropbox/Grad School/896/10_22.RData")
