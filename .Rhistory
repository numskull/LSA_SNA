I = diag(1, nrow(A), ncol(A))
mod = function(A) { # 7.69
m2 = sum(A)
mod = 0
for(i in 1:nrow(A)) {
for(j in 1:nrow(A)) {
mod = mod + (A[i,j] - (degree(A,i) * degree(A,j) / m2)) * I[classes[i],classes[j]]
}
}
mod = 1/m2 * mod
return(mod)
}
mod(A) # Gives exactly the same value as igraph's modularity function.
modularity_matrix(g)
modularity_matrix(g, classes)
A[1,2]-((degree(A,1) * degree(A,2))/sum(A))
A = c(0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0) # Matrix 6.2 in Newman
A = matrix(A, 6,6)
colnames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha") # I like to have names to make this easier.
rownames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
I = diag(1, nrow(A), ncol(A))
mod = function(A, matrix = F) { # 7.69
m2 = sum(A)
mod = 0
mat = A
for(i in 1:nrow(A)) {
for(j in 1:nrow(A)) {
mat[i,j] = (A[i,j] - (degree(A,i) * degree(A,j) / m2))
mod = mod + (mat[i,j] * I[classes[i],classes[j]])
}
}
if(matrix == T) {
return(mat)
}
mod = 1/m2 * mod
return(mod)
}
mod(A) # Gives exactly the same value as igraph's modularity function.
moad(A, T)
A = c(0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0) # Matrix 6.2 in Newman
A = matrix(A, 6,6)
colnames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha") # I like to have names to make this easier.
rownames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
I = diag(1, nrow(A), ncol(A))
mod = function(A, matrix = F) { # 7.69
m2 = sum(A)
mod = 0
mat = A
for(i in 1:nrow(A)) {
for(j in 1:nrow(A)) {
mat[i,j] = (A[i,j] - (degree(A,i) * degree(A,j) / m2))
mod = mod + (mat[i,j] * I[classes[i],classes[j]])
}
}
if(matrix == T) {
return(mat)
}
mod = 1/m2 * mod
return(mod)
}
mod(A) # Gives exactly the same value as igraph's modularity function.
mod(A, T)
A = c(0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0) # Matrix 6.2 in Newman
A = matrix(A, 6,6)
colnames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha") # I like to have names to make this easier.
rownames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
I = diag(1, nrow(A), ncol(A))
mod = function(A, classes, matrix = F) { # 7.69
m2 = sum(A)
mod = 0
mat = A
for(i in 1:nrow(A)) {
for(j in 1:nrow(A)) {
mat[i,j] = (A[i,j] - (degree(A,i) * degree(A,j) / m2))
mod = mod + (mat[i,j] * I[classes[i],classes[j]])
}
}
if(matrix == T) {
return(mat)
}
mod = 1/m2 * mod
return(mod)
}
mod(A, classes) # Gives exactly the same value as igraph's modularity function.
mod(A, classes, T) # Also the exact same matrix as igraph's modularity function.
A = c(0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0) # Matrix 6.2 in Newman
A = matrix(A, 6,6)
colnames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha") # I like to have names to make this easier.
rownames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
ages = c(15,20,17,18,22,21)
I = diag(1, nrow(A), ncol(A))
cov = function(A, scalar) {
m2 = sum(A)
mod = 0
for(i in 1:nrow(A)) {
for(j in 1:nrow(A)) {
cov = cov + (A[i,j] - (degree(A,i) * degree(A,j) / m2)) * (scalar[i] * scalar[j])
}
}
cov = 1/m2 * cov
return(cov)
}
cov(A, ages)
ages[1]
A = c(0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0) # Matrix 6.2 in Newman
A = matrix(A, 6,6)
colnames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha") # I like to have names to make this easier.
rownames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
ages = c(15,20,17,18,22,21)
I = diag(1, nrow(A), ncol(A))
cov = function(A, scalar) {
m2 = sum(A)
mod = 0
for(i in 1:nrow(A)) {
for(j in 1:nrow(A)) {
cov = cov + ((A[i,j] - (degree(A,i) * degree(A,j) / m2)) * (scalar[i] * scalar[j]))
}
}
cov = 1/m2 * cov
return(cov)
}
cov(A, ages)
scalar
A = c(0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0) # Matrix 6.2 in Newman
A = matrix(A, 6,6)
colnames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha") # I like to have names to make this easier.
rownames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
ages = c(15,20,17,18,22,21)
I = diag(1, nrow(A), ncol(A))
cov = function(A, scalar) {
m2 = sum(A)
cov = 0
for(i in 1:nrow(A)) {
for(j in 1:nrow(A)) {
cov = cov + ((A[i,j] - (degree(A,i) * degree(A,j) / m2)) * (scalar[i] * scalar[j]))
}
}
cov = 1/m2 * cov
return(cov)
}
cov(A, ages)
A = c(0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0) # Matrix 6.2 in Newman
A = matrix(A, 6,6)
colnames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha") # I like to have names to make this easier.
rownames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
ages = c(15,20,17,18,22,21)
I = diag(1, nrow(A), ncol(A))
cov = function(A, scalar) {
m2 = sum(A)
cov = 0
for(i in 1:nrow(A)) {
for(j in 1:nrow(A)) {
cov = cov + ((A[i,j] - (degree(A,i) * degree(A,j) / m2)) )
}
}
cov = 1/m2 * (cov) * (scalar[i] * scalar[j])
return(cov)
}
cov(A, ages)
A = c(0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0) # Matrix 6.2 in Newman
A = matrix(A, 6,6)
colnames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha") # I like to have names to make this easier.
rownames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
ages = c(15,20,17,18,22,21)
I = diag(1, nrow(A), ncol(A))
cov = function(A, scalar) {
m2 = sum(A)
cov = 0
for(i in 1:nrow(A)) {
for(j in 1:nrow(A)) {
cov = cov + ((A[i,j] - (degree(A,i) * degree(A,j) / m2)) )
}
}
cov = 1/m2 * (cov * (scalar[i] * scalar[j]))
return(cov)
}
cov(A, ages)
modularity(g, ages)
cov(A, degreeCent(A))
assortDegree = function(A) {
m2 = sum(A)
assort = 0
for(i in 1:nrow(A)) {
for(j in 1:nrow(A)) {
assort = assort + (A[i,j]  - (degree(A,i) * degree(A,j) / m2)) * (degree(A,i) * degree(A,j))
}
}
return(assort)
}
assortDegree(A)
assortDegree = function(A) {
m2 = sum(A)
assort = 0
for(i in 1:nrow(A)) {
for(j in 1:nrow(A)) {
assort = assort + (A[i,j]  - (degree(A,i) * degree(A,j) / m2)) * (degree(A,i) * degree(A,j))
}
}
assort = 1/m2 * assort
return(assort)
}
assortDegree(A)
A = c(0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0) # Matrix 6.2 in Newman
A = matrix(A, 6,6)
colnames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha") # I like to have names to make this easier.
rownames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
ages = c(15,20,17,18,22,21)
I = diag(1, nrow(A), ncol(A))
cov = function(A, scalar) {
m2 = sum(A)
cov = 0
for(i in 1:nrow(A)) {
for(j in 1:nrow(A)) {
cov = cov + ((A[i,j] - (degree(A,i) * degree(A,j) / m2))) * (scalar[i] * scalar[j])
}
}
cov = 1/m2 * cov
return(cov)
}
cov(A, ages)
table(degreeCent(A))
degreeCent(A)
degreeCent(A)/nrow(A)
table(degreeCent(A)/nrow(A))
plot(table(degreeCent(A)))
plot(table(degreeCent(A)), type = bar)
plot(table(degreeCent(A)), type = "bar")
plot(table(degreeCent(A)), type = "histogram")
?plot
plot(table(degreeCent(A)), type = "h")
plot(table(degreeCent(A)), type = "s")
View(namesList)
ids = estc$estc_cit_number
names = unlist(namesList)
View(names)
names = namesList
test = cbind(ids, namesList)
View(test)
test = rbind(ids, namesList)
View(test)
df = data.frame(ids,namesList)
View(df)
names(namesList)
Matrix(namesList)
as.matrix(namesList)
mat = matrix(0,length(names(namesList)))
nrow(mat)
length(namesList[[1]])
length(namesList[[2]])
length(namesList[[3]])
length(namesList[[4]])
length(namesList[[5]])
length(namesList[[6]])
length(namesList[[7]])
length(namesList[[8]])
length(namesList[[9]])
namesList[1-10]
names(df)
row.names(df)
View(df)
nrow(df)
for(i in 1:nrow(df)){
newDf[i] = paste(df[i], collapse = '; ')
}
newdf = c()
for(i in 1:nrow(df)){
newDf[i] = paste(df[i], collapse = '; ')
}
newdf = c()
for(i in 1:nrow(df)){
newdf[i] = paste(df[i], collapse = '; ')
}
for(i in 1:nrow(df)){
newdf[i] = paste(df[i,], collapse = '; ')
}
newdf
newdf = c()
for(i in 1:nrow(df)){
newdf[i] = paste(as.character(df[i,]), collapse = '; ')
}
newdf
newdf = c()
for(i in 1:nrow(df)){
newdf[i] = do.call(paste, c(as.list(df[i,]), sep="; "))
}
newdf
View(newdf)
mat = matrix(0,nrow(newdf))
names(mat) = newdf
row.names(mat) = newdf
nrow(newdf)
length(newdf)
mat = matrix(0, length(newdf))
names(mat) = newdf
row.names(mat) = newdf
View(mat)
mat = matrix(0, length(newdf), length(newdf))
names(mat) = newdf
row.names(mat) = newdf
View(mat)
names(mat)
row.names(mat)
for(i in 1:length(namesList)) {
names = namesList[[i]]
if(length(names) > 1) {
for(j in 1:length(names) - 1) {
jname = which(row.names(mat) == names[j])
iname = which(row.names(mat) == names[j+1])
mat[iname,jname] = mat[iname,jname] + 1
}
}
}
for(i in 1:length(namesList)) {
print(i)
names = namesList[[i]]
if(length(names) > 1) {
for(j in 1:length(names) - 1) {
jname = which(row.names(mat) == names[j])
iname = which(row.names(mat) == names[j+1])
mat[iname,jname] = mat[iname,jname] + 1
}
}
}
for(i in 1:length(namesList)) {
print(i)
names = namesList[[i]]
if(length(names) > 1) {
prev = c()
for(j in 1:length(names) - 1) {
if(j > 1) {
prev = c(prev, names[j-1])
}
jname = which(row.names(mat) == names[j])
iname = which(row.names(mat) == names[j+1])
mat[jname,iname] = 1
if(length(prev) > 1) {
for(k in 1:length(prev)) {
prevName = which(row.names(mat) == prev[k])
mat[jname, prevName] = 1
}
}
}
}
}
View(mat[1-50,1-50])
md = degreeCent(mat)
View(md)
names(md) = row.names(mat)
names(md) = row.names(mat)
View(md)
row.names(md) = row.names(mat)
rownames(md) = row.names(mat)
names(md)
View(md)
class(md)
md = as.vector(md)
row.names(md) = names(md)
View(md)
row.names(md)
md = as.data.frame(md)
row.names(md) = row.names(mat)
View(md)
md = as.matrix(md)
row.names(md) = row.names(mat)
plot(table(md))
plot(table(md), type = "h")
plot(table(md), type = "b")
plot(table(md), type = "l")
which(md = 134)
which(md == 134)
md[which(md == 134)]
names(md[which(md == 134)])
names(md)[which(md == 134)]
which(md == 1400)
which(md == 134)
md[883]
row.names(md)[883]
which(row.names(md)[883 %in% namesList)
which(row.names(md)[883] %in% namesList)
mat[which(row.names(mat) == "Edward; Alldee; 1588"),]
View(mat[which(row.names(mat) == "Edward; Alldee; 1588"),])
row.names(namesList)
names(namesList)
namesVec = c()
idsVec = c()
for(i in 1:length(namesList)) {
names = namesList[[i]]
for(j in 1:length(names)){
namesVec = c(namesVec, names[j])
}
idsVec = c(idsVec, rep(names(namesList)[i], length(names)))
}
View(cbind(namesVec,idsVec))
View(namesList)
namesVec = c()
idsVec = c()
for(i in 1:length(namesList)) {
names = namesList[[i]]
for(j in 1:length(names)){
namesVec = c(namesVec, names[j])
}
if(length(names) > 1) {
idsVec = c(idsVec, rep(names(namesList)[i], length(names)))
}
}
View(cbind(namesVec, idsVec))
namesVec = c()
idsVec = c()
for(i in 1:length(namesList)) {
names = namesList[[i]]
for(j in 1:length(names)){
namesVec = c(namesVec, names[j])
idsVec = c(idsVec, names(namesList)[i])
}
if(length(names) > 1) {
}
}
View(cbind(namesVec, idsVec))
View(rbind(namesVec, idsVec))
lenght(namesList[[2]])
length(namesList[[2]])
names(namesList)[2]
names(namesList)[1]
names(namesList)[[1]]
names(namesList)[[2]]
namesVec = c()
idsVec = c()
for(i in 1:length(namesList)) {
if(length(namesList)[[i]] > 0) {
names = namesList[[i]]
for(j in 1:length(names)){
namesVec = c(namesVec, names[j])
idsVec = c(idsVec, names(namesList)[i])
}
}
}
namesVec = c()
idsVec = c()
for(i in 1:length(namesList)) {
if(length(namesList[[i]]) > 0) {
names = namesList[[i]]
for(j in 1:length(names)){
namesVec = c(namesVec, names[j])
idsVec = c(idsVec, names(namesList)[i])
}
}
}
View(cbind(namesVec, idsVec))
View(namesList)
edges = data.frame(namesVec, idsVec)
write.csv(edges, "edges.csv")
B = data.frame()
for (i in 1:nrow(edges)) {
person = edges[i,1]
book = edges[i,2]
B[person,book] = 1
}
edges[1,2]
edges[1,1]
edges$namesVec = as.character(edges$namesVec)
edges$idsVec = as.character(edges$idsVec)
for (i in 1:nrow(edges)) {
person = edges[i,1]
book = edges[i,2]
B[person,book] = 1
}
B = matrix()
for (i in 1:nrow(edges)) {
person = edges[i,1]
book = edges[i,2]
B[person,book] = 1
}
B = da.frame()
for (i in 1:nrow(edges)) {
person = edges[i,1]
book = edges[i,2]
B[person,book] = 1
}
B = data.frame()
for (i in 1:nrow(edges)) {
person = edges[i,1]
book = edges[i,2]
B[person,book] = 1
}
B = matrix(0, length(edges$namesVec), length(edges$idsVec))
B = matrix(0, length(edges$namesVec), length(edges$idsVec))
B = matrix(0, nrow = length(edges$namesVec), ncol = length(edges$idsVec))
length(edges$namesVec)
mat[jname,iname] = 1
B = matrix(0, 177720, 177720)
B
remove(B)
B = matrix(0, 177720, 177720)
B = Matrix(0, 177720, 177720)
library(Matrix)
B = Matrix(0, 177720, 177720)
colnames(B) = edges$idsVec
rownames(B) = edges$namesVec
for (i in 1:nrow(edges)) {
person = edges[i,1]
book = edges[i,2]
B[person,book] = 1
}
View(B)
B[1,2]
B[1,3]
B[1,4]
B[1,4]
B[1,5]
B[which(B[1,] != 0),]
B[1,which(B[1,] != 0)]
md = degreeCent(B)
