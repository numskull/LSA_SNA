unitUnit(df, 'king', 'battle')
unitUnit = function(df, termOne, termTwo) {
i = which(row.names(df) == termOne)
j = which(row.names(df) == termTwo)
s = diag(svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$d)
v = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$v
u = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$u
us = u %*% s
browser()
uis = us[i,]^2
ujt = t(u)[,j]
top = uis %*% ujt
bottom = sqrt(us[i,] %*% us[i,]) %*% sqrt(us[j,] %*% us[j,])
return(top/bottom)
}
unitUnit(df, 'king', 'battle')
i
j
t(u)[,j]
t(u)[j,]
t(u)[,j]
u[j,]
u[i,]^2
u[i,] %*% u[i,]
uis = us[i,] %*% us[i,]
ujt = t(u)[,j]
top = uis %*% ujt
top
bottom = sqrt(us[i,] %*% us[i,]) %*% sqrt(us[j,] %*% us[j,])
top / bottom
bottom
sqrt(us[i,] %*% us[i,])
sqrt(us[j,] %*% us[j,])
uis %*% ujt
cosine(us[7,], us[772,])
cosine(df['king'], df['battle'])
cosine(df['king',], df['battle',])
df['king',]
df['battle',]
cosine(as.matrix(df['king',]), as.matrix(df['battle',]))
cosine(as.matrix(df)['king',], as.matrix(df)['battle',])
u[i,] %*% s %*% s %*% t(u)[,j]
uis = us[15,]^2
ujt = t(u)[,3]
top = uis %*% ujt
top
uis = us[i,]^2
ujt = t(u)[,j]
top = uis %*% ujt
top
top = u[i,] %*% s %*% s %*% t(u)[,j]
bottom = sqrt((us[15,] %*% us[15,])) %*% sqrt((us[,3] %*% us[,3]))
top / bottom
df[i,]
df[,j]
df[j,]
cosine(as.matrix(df)['king',], as.matrix(df)['battle',])
cosine(as.matrix(us)[i,], as.matrix(us)[j,])
top = u[i,] %*% s %*% s %*% t(u)[j,]
bottom = sqrt((us[15,] %*% us[15,])) %*% sqrt((us[,3] %*% us[,3]))
top / bottom
bottom = sqrt((us[i,] %*% us[i,])) %*% sqrt((us[,j] %*% us[,j]))
bottom = sqrt((us[i,] %*% us[i,])) %*% sqrt((us[j,] %*% us[j,]))
top / bottom
unitUnit = function(df, termOne, termTwo) {
i = which(row.names(df) == termOne)
j = which(row.names(df) == termTwo)
s = diag(svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$d)
v = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$v
u = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$u
us = u %*% s
#browser()
top = u[i,] %*% s %*% s %*% t(u)[j,]
bottom = sqrt((us[i,] %*% us[i,])) %*% sqrt((us[j,] %*% us[j,]))
return(top/bottom)
}
unitUnit(df, 'king', 'battle')
top = u[i,] %*% s %*% s %*% t(u)[j,]
top = u[i,] %*% s %*% s %*% t(u)[,j]
bottom = sqrt((us[i,] %*% us[i,])) %*% sqrt((us[j,] %*% us[j,]))
top / bottom
unitUnit = function(df, termOne, termTwo) {
i = which(row.names(df) == termOne)
j = which(row.names(df) == termTwo)
s = diag(svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$d)
v = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$v
u = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$u
us = u %*% s
#browser()
top = u[i,] %*% s %*% s %*% t(u)[,j]
bottom = sqrt((us[i,] %*% us[i,])) %*% sqrt((us[j,] %*% us[j,]))
return(top/bottom)
}
unitUnit(df, 'king', 'battle')
length(u[1,])
length(u[,1])
unitUnitSim = function(df, term) {
i = which(row.names(df) == term)
terms = c()
for(j in 1:length(u[,1])){
dist = 0
if(j != termIndex) {
top = top = u[i,] %*% s %*% s %*% t(u)[,j]
bottom = sqrt((us[i,] %*% us[i,])) %*% sqrt((us[j,] %*% us[j,]))
dist = top / bottom
terms[j] = dist
names(terms)[j] = row.names(df)[j]
}
}
}
test = unitUnitSim(df, 'battle')
unitUnitSim = function(df, term) {
i = which(row.names(df) == term)
terms = c()
for(j in 1:length(u[,1])){
dist = 0
if(j != i) {
top = top = u[i,] %*% s %*% s %*% t(u)[,j]
bottom = sqrt((us[i,] %*% us[i,])) %*% sqrt((us[j,] %*% us[j,]))
dist = top / bottom
terms[j] = dist
names(terms)[j] = row.names(df)[j]
}
}
}
test = unitUnitSim(df, 'battle')
View(test)
unitUnitSim = function(df, term) {
i = which(row.names(df) == term)
terms = c()
for(j in 1:length(u[,1])){
dist = 0
if(j != i) {
top = top = u[i,] %*% s %*% s %*% t(u)[,j]
bottom = sqrt((us[i,] %*% us[i,])) %*% sqrt((us[j,] %*% us[j,]))
dist = top / bottom
terms[j] = dist
browser()
names(terms)[j] = row.names(df)[j]
}
}
}
test = unitUnitSim(df, 'battle')
j
i
dist
terms
names(terms)
terms
j
dist
unitUnitSim = function(df, term) {
i = which(row.names(df) == term)
terms = c()
for(j in 1:length(u[,1])){
dist = 0
if(j != i) {
top = top = u[i,] %*% s %*% s %*% t(u)[,j]
bottom = sqrt((us[i,] %*% us[i,])) %*% sqrt((us[j,] %*% us[j,]))
dist = top / bottom
terms[j] = dist
browser()
names(terms)[j] = row.names(df)[j]
}
}
return(terms)
}
test = unitUnitSim(df, 'battle')
unitUnitSim = function(df, term) {
i = which(row.names(df) == term)
terms = c()
for(j in 1:length(u[,1])){
dist = 0
if(j != i) {
top = top = u[i,] %*% s %*% s %*% t(u)[,j]
bottom = sqrt((us[i,] %*% us[i,])) %*% sqrt((us[j,] %*% us[j,]))
dist = top / bottom
terms[j] = dist
#browser()
names(terms)[j] = row.names(df)[j]
}
}
return(terms)
}
test = unitUnitSim(df, 'battle')
View(test)
sort(test, descending=T)[1:10]
sort(test, descending=TRUE)[1:10]
sort(test, decreasing=TRUE)[1:10]
compComp = function(df, d1, d2) {
i = which(names(df) == d1)
j = which(names(df) == d2)
s = diag(svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$d)
v = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$v
u = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$u
vs = v %*% s
top = v[i,] %*% s %*% s %*% t(v)[,j]
bottom = sqrt(vs[i,] %*% vs[i,]) %*% sqrt(vs[j,] %*% vs[j,])
return(top / bottom)
}
compComp(df[,2],df[,3])
compComp(df, df[,2],df[,3])
compComp(df, names(df)[,2],names(df)[,3])
compComp(df, names(df)[2],names(df)[3])
names(df)[2]
dim[v]
dim(v)
compCompSim = function(df, d1) {
i = which(names(df) == d1)
s = diag(svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$d)
v = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$v
u = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$u
docs = c()
vs = v %*% s
for(j in 1:length(v[1,])) {
top = v[i,] %*% s %*% s %*% t(v)[,j]
bottom = sqrt(vs[i,] %*% vs[i,]) %*% sqrt(vs[j,] %*% vs[j,])
dist = top / bottom
docs[j] = dist
names(docs)[j] = names(df)[j]
}
}
test = compCompSim(df, names(df)[2])
sort(test, decreasing=T)[1:10]
compCompSim = function(df, d1) {
i = which(names(df) == d1)
s = diag(svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$d)
v = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$v
u = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$u
docs = c()
vs = v %*% s
for(j in 1:length(v[1,])) {
top = v[i,] %*% s %*% s %*% t(v)[,j]
bottom = sqrt(vs[i,] %*% vs[i,]) %*% sqrt(vs[j,] %*% vs[j,])
dist = top / bottom
docs[j] = dist
names(docs)[j] = names(df)[j]
}
return(docs)
}
compCompSim = function(df, d1) {
i = which(names(df) == d1)
s = diag(svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$d)
v = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$v
u = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$u
docs = c()
vs = v %*% s
for(j in 1:length(v[1,])) {
top = v[i,] %*% s %*% s %*% t(v)[,j]
bottom = sqrt(vs[i,] %*% vs[i,]) %*% sqrt(vs[j,] %*% vs[j,])
dist = top / bottom
docs[j] = dist
names(docs)[j] = names(df)[j]
}
return(docs)
}
test = compCompSim(df, names(df)[2])
sort(test, decreasing=T)[1:10]
compCompSim = function(df, d1) {
i = which(names(df) == d1)
s = diag(svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$d)
v = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$v
u = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$u
docs = c()
vs = v %*% s
for(j in 1:length(v[1,])) {
dist = 0
if(j != i) {
top = v[i,] %*% s %*% s %*% t(v)[,j]
bottom = sqrt(vs[i,] %*% vs[i,]) %*% sqrt(vs[j,] %*% vs[j,])
dist = top / bottom
docs[j] = dist
names(docs)[j] = names(df)[j]
}
}
return(docs)
}
test = compCompSim(df, names(df)[2])
sort(test, decreasing=T)[1:10]
names(df)[2]
names(df)[3]
names(df)[4]
compComp(df, names(df)[2], names(df)[4])
df[1:10,1:10]
compComp(df, names(df)[2], names(df)[4])
unitComp = function(df, term, doc) {
i = which(row.names(df) == term)
j = which(names(df) == doc)
us = u %*% sqrt(s)
vs = v %*% sqrt(s)
top = u[i,] %*% s %*% s %*% t(v)[,j]
bottom = sqrt(us[i,] %*% us[i,]) %*% sqrt(vs[j,] %*% vs[j,])
return(top/bottom)
}
unitComp(df, 'battle', 'hamlet')
vs = v %*% sqrt(s)
which(names(df) == 'hamlet')
names(df)
unitComp(df, 'battle', 'Ham')
unitComp(df, 'love', 'Ham')
us = u %*% sqrt(s)
which(row.names(df) == 'love')
which(names(df) == "Ham")
which(names(df) == "JC")
cosine(us[15,], vs[15,])
unitComp = function(df, term, doc) {
i = which(row.names(df) == term)
j = which(names(df) == doc)
us = u %*% sqrt(s)
vs = v %*% sqrt(s)
top = u[i,] %*% s %*% t(v)[,j]
bottom = sqrt(us[i,] %*% us[i,]) %*% sqrt(vs[j,] %*% vs[j,])
return(top/bottom)
}
unitComp(df, 'love', 'Ham')
length(u[1,])
length(u[,1])
unitCompSim = function(df, term="", comp="") {
s = diag(svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$d)
v = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$v
u = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$u
us = u %*% sqrt(s)
vs = v %*% sqrt(s)
if(term != "") {
i = which(row.names(df) == term)
docs = c()
for(j in 1:length(v[1,])) {
dist = 0
top = u[i,] %*% s %*% t(v)[,j]
bottom = sqrt(us[i,] %*% us[i,]) %*% sqrt(vs[j,] %*% vs[j,])
dist[j] = top / bottom
names(dist)[j] = names(df)[j]
}
return(dist)
} else if(comp != "") {
i = which(names(df) == comp)
docs = c()
for(j in 1:length(u[,1])) {
dist = 0
top = u[j,] %*% s %*% t(v)[,i]
bottom = sqrt(us[j,] %*% us[j,]) %*% sqrt(vs[i,] %*% vs[i,])
dist[j] = top / bottom
names(dist)[j] = row.names(df)[j]
}
return(dist)
} else {
echo("Please provide only one value.")
}
}
test = unitCompSim(df, 'battle')
View(test)
unitCompSim = function(df, term="", comp="") {
s = diag(svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$d)
v = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$v
u = svd(df, nv=min(length(df[1,]), length(df[,1])), nu=min(length(df[1,]), length(df[,1])))$u
us = u %*% sqrt(s)
vs = v %*% sqrt(s)
if(term != "") {
i = which(row.names(df) == term)
docs = c()
for(j in 1:length(v[1,])) {
dist = 0
top = u[i,] %*% s %*% t(v)[,j]
bottom = sqrt(us[i,] %*% us[i,]) %*% sqrt(vs[j,] %*% vs[j,])
docs[j] = top / bottom
names(docs)[j] = names(df)[j]
}
return(docs)
} else if(comp != "") {
i = which(names(df) == comp)
docs = c()
for(j in 1:length(u[,1])) {
dist = 0
top = u[j,] %*% s %*% t(v)[,i]
bottom = sqrt(us[j,] %*% us[j,]) %*% sqrt(vs[i,] %*% vs[i,])
docs[j] = top / bottom
names(docs)[j] = row.names(df)[j]
}
return(docs)
} else {
echo("Please provide only one value.")
}
}
test = unitCompSim(df, 'battle')
View(test)
sort(test, decreasing=True)[1:10]
sort(test, decreasing=T)[1:10]
View(test)
inv(sort(test, decreasing=T)[1:10])
sort(test^-1, decreasing=T)[1:10]
df['bishop', 'H5']
df[, 'H5']
sort(df[, 'H5'], decreasing=T)[1:10]
names(sort(df[, 'H5'], decreasing=T)[1:10])
View(df['H5'])
A = c(0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0)
A = mat(A, 6,6)
A = matrix(A, 6,6)
A
names(A)
Names(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
col.names(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
colnames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
rownames(A) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
A
dirA = c(0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0)
dirA = matrix(dirA, 6, 6)
dirA
rownames(dirA) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
colnames(dirA) = c("Bill", "Ted", "Jane", "Sally", "Mark", "Marsha")
dirA
cocitation(dirA)
cocitation = function(mat) {
C = mat %*% t(mat)
newMat = mat
for(i in 1:length(mat[1,])){
for(j in 1:length(mat[,1])) {
if(i != j) {
if(C[i,j] > 0) {
newMat[i,j] = 1
} else {
newMat[i,j] = 0
}
}
}
}
return(newMat)
}
cocitation(dirA)
dirA
graph(cocitation(dirA))
plot(cocitation(dirA))
install.packages("igraph")
library(igraph)
g = graph.adjacency(dirA)
plot(g)
c = graph.adjacency(cocitation(dirA))
plot(c)
plot(g)
plot(c)
cocitation = function(mat) { #formula
C = mat %*% t(mat)
newMat = mat
for(i in 1:length(mat[1,])){
for(j in 1:length(mat[,1])) {
if(i != j) {
if(C[i,j] > 0) {
newMat[i,j] = newMat[i,j] + 1
} else {
newMat[i,j] = 0
}
}
}
}
return(newMat)
}
c = graph.adjacency(cocitation(dirA))
plot(c)
cocitation(dirA)
plot(g)
bibCoupling = function(mat) {
B = t(mat) %*% mat
newMat = mat
for(i in 1:length(B[1,])) {
for(j in 1:length(B[,1])){
if(B[i,j] > 0){
newMat[i,j] = newMat[i,j] + 1
}
}
}
return(newMat)
}
bubCoupling(dirA)
bibCoupling(dirA)
dirA
d = graph.adjacency(bibCoupling(dirA))
plot(d)
d = graph.adjacency(bibCoupling(dirA), weighted = T)
plot(d)
d = graph.adjacency(bibCoupling(dirA), weighted = T, mode = 'undirected')
plot(d)
plot(c)
c = graph.adjacency(cocitation(dirA), mode="undirected")
plot(c)
plot(b)
plot(a)
plot(g)
A %*% t(A)
A
dirA %*% dirA
dirA %*% t(dirA)
cocitation = function(mat) { #formula
C = mat %*% t(mat)
newMat = mat
for(i in 1:length(C[1,])){
for(j in 1:length(C[,1])) {
if(i != j) {
if(C[i,j] > 0) {
newMat[i,j] = newMat[i,j] + C[i,j]
} else {
newMat[i,j] = 0
}
}
}
}
return(newMat)
}
c = graph.adjacency(cocitation(dirA), mode="undirected")
plot(c)
cocitation(dirA)
dirA %*% t(dirA)
save.image("C:/Users/travis/Dropbox/Grad School/896/10_22.RData")
